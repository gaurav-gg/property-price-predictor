webpage2 <- read_html(url2)
Builder <- html_nodes(webpage2,'#BuilderNameApp') %>% xml_nodes('select') #%>% xml_nodes('option')
city <- 'MUMBAI'
url_f <- paste(url2,city,sep = '')
webpage2 <- read_html(url2)
Builder <- html_nodes(webpage2,'#BuilderNameApp') #%>% xml_nodes('select') #%>% xml_nodes('option')
View(Builder)
builder <- html_nodes(webpage2,'tech tech2')
builder <- html_nodes(webpage2,'.tech tech2')
builder <- html_nodes(webpage2,'.tech-tech2')
city <- 'MUMBAI'
url_f <- paste(url2,city,sep = '')
webpage2 <- read_html(url2)
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option')
View(builder)
download_html(url_f,'test.html')
webpage2 <- read_html('test.html')
View(webpage2)
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option')
View(builder)
builder <- as.data.frame()
builder <- as.data.frame(builder)
city <- 'MUMBAI'
url_f <- paste(url2,city,sep = '')
download_html(url_f,'test.html')
webpage2 <- read_html('test.html')
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
View(builder)
builder <- builder[-1,]
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
builder <- builder[-1,] %>% as.data.frame()
View(builder)
getwd()
setwd("G:/Intern/IndiaBulls")
library(rvest)
url <- 'https://www.indiabullshomeloans.com/'
webpage <- read_html(url)
cities <- html_nodes(webpage,xpath = '//*[@id="appProject"]')
t <- xml_child(xml_child(xml_child(xml_child(xml_child(xml_child(cities[[1]], 2), 2), 2), 1), 1), 1)
t <- xml_nodes(t,'select')
t <- xml_nodes(t,'option')
t <- html_text(t)
t <- as.data.frame(t)
t <- t[-(1:2),]
t <- as.data.frame(t)
cities <- t
url2 <- 'https://www.indiabullshomeloans.com/mod/home/x-home.inc.php?xAction=selectbuilder&city='
for(city in cities$t){
url_f <- paste(url2,city,sep = '')
download_html(url_f,'test.html')
webpage2 <- read_html('test.html')
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
builder <- builder[-1,] %>% as.data.frame()
name_csv <- paste(city,'.csv',sep = '')
write.csv(builder,name_csv)
}
for(city in cities$t){
url_f <- paste(url2,city,sep = '')
download_html(url_f,'test.html')
webpage2 <- read_html('test.html')
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
builder <- builder[-1,] %>% as.data.frame()
name_csv <- paste(city,'.csv',sep = '')
write.csv(builder,name_csv)
}
library(rvest)
url <- 'https://www.indiabullshomeloans.com/'
webpage <- read_html(url)
cities <- html_nodes(webpage,xpath = '//*[@id="appProject"]')
t <- xml_child(xml_child(xml_child(xml_child(xml_child(xml_child(cities[[1]], 2), 2), 2), 1), 1), 1)
t <- xml_nodes(t,'select')
t <- xml_nodes(t,'option')
t <- html_text(t)
t <- as.data.frame(t)
t <- t[-(1:2),]
t <- as.data.frame(t)
cities <- t
url2 <- 'https://www.indiabullshomeloans.com/mod/home/x-home.inc.php?xAction=selectbuilder&city='
for(city in cities$t){
url_f <- paste(url2,city,sep = '')
name_html <- paste(city,'.html',sep = '')
download_html(url_f,name_html)
webpage2 <- read_html('test.html')
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
builder <- builder[-1,] %>% as.data.frame()
name_csv <- paste(city,'.csv',sep = '')
write.csv(builder,name_csv)
}
View(cities)
url_f
library(rvest)
url <- 'https://www.indiabullshomeloans.com/'
webpage <- read_html(url)
cities <- html_nodes(webpage,xpath = '//*[@id="appProject"]')
t <- xml_child(xml_child(xml_child(xml_child(xml_child(xml_child(cities[[1]], 2), 2), 2), 1), 1), 1)
t <- xml_nodes(t,'select')
t <- xml_nodes(t,'option')
t <- html_text(t)
t <- as.data.frame(t)
t <- t[-(1:2),]
t <- as.data.frame(t)
cities <- t
url2 <- 'https://www.indiabullshomeloans.com/mod/home/x-home.inc.php?xAction=selectbuilder&city='
for(city in cities$t){
url_f <- paste(url2,city,sep = '')
url_f <- gsub(' ','%20',url_f)
#name_html <- paste(city,)
download_html(url_f,'test.html')
webpage2 <- read_html('test.html')
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
builder <- builder[-1,] %>% as.data.frame()
name_csv <- paste(city,'.csv',sep = '')
write.csv(builder,name_csv)
}
library(rvest)
url <- 'https://www.indiabullshomeloans.com/'
webpage <- read_html(url)
cities <- html_nodes(webpage,xpath = '//*[@id="appProject"]')
t <- xml_child(xml_child(xml_child(xml_child(xml_child(xml_child(cities[[1]], 2), 2), 2), 1), 1), 1)
t <- xml_nodes(t,'select')
t <- xml_nodes(t,'option')
t <- html_text(t)
t <- as.data.frame(t)
t <- t[-(1:2),]
t <- as.data.frame(t)
cities <- t
url2 <- 'https://www.indiabullshomeloans.com/mod/home/x-home.inc.php?xAction=selectbuilder&city='
for(city in cities$t){
url_f <- paste(url2,city,sep = '')
url_f <- gsub(' ','%20',url_f)
download_html(url_f,'test.html')
webpage2 <- read_html('test.html')
builder <- html_nodes(webpage2,xpath = '/html/body') %>% xml_nodes('option') %>% html_text() %>% as.data.frame()
builder <- builder[-1,] %>% as.data.frame()
names(builder) <- list('Builder')
name_csv <- paste(city,'.csv',sep = '')
write.csv(builder,name_csv)
}
count <- 0
for(city in cities){
df <- read.csv(paste(city,'.csv',sep = ''))
count <- count + nrow(df)
}
count <- 0
for(city in cities){
name <- paste(city,'.csv',sep = '')
df <- read.csv(name)
count <- count + nrow(df)
}
count <- 0
for(city in cities$t){
name <- paste(city,'.csv',sep = '')
df <- read.csv(name)
count <- count + nrow(df)
}
count
setwd("G:/Intern/Preclosure Project")
library(ggplot2)
library(lattice)
library(caret)
library(randomForest)
library(ROCR)
library(pROC)
library(gmodels)
library(rpart)
library(rpart.plot)
library(doSNOW)
library(DMwR)
library(xgboost)
library(dplyr)
library(broom)
# Load raw data
CompleteData <- read.csv("R_Input.csv", header = TRUE)
# Convert Foreclosed as a factor
CompleteData$Foreclosed <- as.factor(CompleteData$Foreclosed)
CompleteData$Foreclosed <- relevel(CompleteData$Foreclosed, "TRUE", "FALSE")
table(CompleteData$Foreclosed)
# Pick out the output column
CompleteData_Foreclosed <- as.factor(CompleteData$Foreclosed)
# Check and clean the data types
str(CompleteData)
CompleteData$PaymentDelay <- as.integer(CompleteData$PaymentDelay)
# 70% of the data is split, maintaining the same proportion
intrain <- createDataPartition(CompleteData_Foreclosed,p=0.6,list=FALSE)
# For the testing and training data sets using the intrain row indexes
train<-CompleteData[intrain,]
testwithfinal<-CompleteData[-intrain,]
# Split the test data in half again. One of them is to be kept for final validation
finaltestindex <- createDataPartition(testwithfinal$Foreclosed,p=0.5,list=FALSE)
test <- testwithfinal[finaltestindex,]
finaltestdata <- testwithfinal[-finaltestindex,]
# Check proportion of pre-closures in the testing and training sets
table(train$Foreclosed)
table(test$Foreclosed)
ggplot(CompleteData, aes(x = SqftRate)) +
geom_dotplot()
CompleteData <- CompleteData %>% filter(SqftRate<20000)
CompleteData %>%
filter(SqftRate > 5000) %>%
ggplot(aes(x = CityType)) +
geom_histogram(stat = "count")
CompleteData %>%
ggplot(aes(x = SqftRate, fill = Foreclosed)) +
geom_histogram(stat = "bin")
CompleteData %>%
ggplot(aes(x = 1, y = LoanAmount)) +
geom_boxplot()
CompleteData %>%
filter(LoanAmount < 3000000) %>%
ggplot(aes(x = LoanAmount, fill = Foreclosed)) +
geom_histogram(stat = "bin")
CompleteData %>%
filter(LoanAmount < 3000000) %>%
ggplot(aes(x = LoanAmount, fill = Foreclosed)) +
geom_histogram(stat = "bin", position = "fill")
# Let's remove the row where the loan amount is greater than 50 lakh
CompleteData <- CompleteData %>% filter(LoanAmount < 5000000)
CompleteData %>%
ggplot(aes(x = GPTPZP, fill = Foreclosed)) +
geom_histogram(stat = "count")
CompleteData %>%
ggplot(aes(x = GPTPZP, fill = Foreclosed)) +
geom_histogram(stat = "count", position = "fill")
CompleteData %>%
filter (CIBIL <=5) %>%
ggplot(aes(x = CIBIL, fill = Foreclosed)) +
geom_histogram()
CompleteData %>%
filter (CIBIL <=5) %>%
ggplot(aes(x = CIBIL, fill = Foreclosed)) +
geom_histogram(position = "fill")
CompleteData %>%
filter (CIBIL >5) %>%
ggplot(aes(x = CIBIL, fill = Foreclosed)) +
geom_histogram()
CompleteData %>%
filter (CIBIL >5) %>%
ggplot(aes(x = CIBIL, fill = Foreclosed)) +
geom_histogram(position = "fill")
CompleteData <- CompleteData %>% filter (CIBIL <=5 | CIBIL > 300)
CompleteData %>%
ggplot(aes(x = VintageDefault, fill = Foreclosed))+
geom_histogram()
CompleteData %>%
ggplot(aes(x = VintageDefault, fill = Foreclosed))+
geom_histogram(position = "fill")
CompleteData %>%
filter(Vintage >20) %>%
ggplot(aes(x = PaymentDelay, fill = Foreclosed))+
geom_histogram(breaks = c(0,30,60,90,120))
CompleteData %>%
ggplot(aes(x = 1, y = RoI))+
geom_boxplot()
CompleteData %>%
filter(RoI > 10, RoI < 15, Vintage > 20) %>%
ggplot(aes(x = RoI, fill = Foreclosed))+
geom_histogram(binwidth = 0.5)
CompleteData %>%
filter(RoI > 10, RoI < 15) %>%
ggplot(aes(x = RoI, fill = Foreclosed))+
geom_histogram(position = "fill", binwidth = 0.5)
CompleteData %>%
filter(RoI > 10, RoI < 15) %>%
ggplot(aes(x = RoI, fill = Foreclosed))+
geom_histogram(position = "fill", binwidth = 0.5)
CompleteData %>%
ggplot(aes(x = CityType, fill = Foreclosed)) +
geom_histogram(stat = "count", position = "fill")
CompleteData %>%
ggplot(aes(x = Vintage, fill = Foreclosed)) +
geom_histogram(stat = "bin", position = "fill")
CompleteData %>%
ggplot(aes(x = Vintage, fill = Foreclosed)) +
geom_histogram(stat = "bin")
CompleteData %>%
filter(TotalUnits <= 3500) %>%
ggplot(aes(x = TotalUnits, fill = Foreclosed)) +
geom_histogram(stat = "bin")
CompleteData %>%
filter(TotalUnits <= 3000) %>%
ggplot(aes(x = TotalUnits, fill = Foreclosed)) +
geom_histogram(stat = "bin", position = "fill", breaks = c(100,200,300,400,500,600,700,800,900,1000))
CompleteData %>%
filter(TotalUnits <= 3000) %>%
ggplot(aes(x = TotalUnits, fill = Foreclosed)) +
geom_histogram(stat = "bin", breaks = c(100,200,300,400,500,600,700,800,900,1000))
CompleteData %>%
filter(TotalUnits <= 1000) %>%
ggplot(aes(x = TotalUnits, fill = Foreclosed)) +
geom_density(alpha = 0.6)
CompleteData %>%
filter(EMI < 45000) %>%
ggplot(aes(x = EMI, fill = Foreclosed)) +
geom_histogram(binwidth = 2500)
CompleteData %>%
filter(EMI < 45000) %>%
ggplot(aes(x = EMI, fill = Foreclosed)) +
geom_histogram(position = "fill", binwidth = 5000)
CompleteData %>%
ggplot(aes(x = 1, y = LTV)) +
geom_boxplot()
CompleteData %>%
ggplot(aes(x = LTV, fill = Foreclosed)) +
geom_histogram()
CompleteData %>%
filter(C_Income < 300000) %>%
ggplot(aes(x = 1, y = C_Income)) +
geom_boxplot()
CompleteData <- CompleteData %>% filter(C_Income < 500000)
CompleteData %>%
filter(C_Income < 200000) %>%
ggplot(aes(x = C_Income, fill = Foreclosed)) +
geom_histogram(breaks = c(10000,20000, 30000, 40000), position = "fill")
CompleteData %>%
filter(C_Income < 200000) %>%
ggplot(aes(x = C_Income, fill = Foreclosed)) +
geom_histogram()
RunRandomForest <- function(seed, features, training, cutoffvector){
set.seed(seed)
# Save the training data
rf.train <- training[,features]
# Save the training set headers in a label for the random forest
rf.label <- as.factor(training$Foreclosed)
#Train the model
rf <- randomForest(x = rf.train, y = rf.label, importance = TRUE, ntree = 1000, cutoff = cutoffvector)
#View the importance of different variables in the random forest model
varImpPlot(rf)
return(rf)
}
MakeConfusionMatrix <- function(rf, testing, features, cutoff){
# Extract the relevant features from the test set
rf.test <- testing[,features]
# Predict a response for each row
rf.preds.prob <- predict(rf, rf.test, type = "prob")
rf.preds.resp <- ifelse(rf.preds.prob[,2] > cutoff, 1, 0)
#Save the true values of the test set in a separate vector
true_val <- as.factor(testing$Foreclosed)
# Store the confusion matrix
rf.preds.confmatrix <- table(true_val,rf.preds.resp)
return(rf.preds.confmatrix)
}
MakeProbPredictions <- function(rf, testing, features){
# Extract the relevant features from the test set
rf.test <- testing[,features]
# Predict a response for each row
rf.preds <- predict(rf, rf.test, type = "prob")
return(rf.preds)
}
ComputeModelParameters <- function(confmatrix, testing){
model_accuracy <- sum(diag(confmatrix)) / sum(confmatrix)
#Overall accuracy of the model
model_sensitivity <- confmatrix[2,2]/sum(confmatrix[2,])
#Sensitivity of the model
model_specificity <- confmatrix[1,1]/sum(confmatrix[1,])
#Specificity of the model
output <- data.frame(model_accuracy,model_sensitivity,model_specificity)
}
e
# one-hot-encoding categorical features
ohe_feats = c('B_LoanAmount', 'GPTPZP', 'B_CIBIL', 'B_ProductType', 'C_Gender', 'CityType', 'PrimaryEmpType',	'B_C_MasterEmpCat', 'B_C_Education', 'CoApplicant', 'B_FOIR', 'CLSS')
dummies <- dummyVars(~ B_LoanAmount + GPTPZP + B_CIBIL + B_ProductType + C_Gender + CityType + PrimaryEmpType + B_C_MasterEmpCat + B_C_Education + CoApplicant + B_FOIR + CLSS, data = train)
ohe_columns <- as.data.frame(predict(dummies, newdata = train))
for (i in  1:ncol(ohe_columns))
{
ohe_columns[,i] <- as.factor(ohe_columns[,i])
}
train_ohed <- cbind(train[,-c(which(colnames(train) %in% ohe_feats))],ohe_columns)
dummies_test <- dummyVars(~ B_LoanAmount + GPTPZP + B_CIBIL + B_ProductType + C_Gender + CityType + PrimaryEmpType + B_C_MasterEmpCat + B_C_Education + CoApplicant + B_FOIR + CLSS, data = test)
ohe_columns_test <- as.data.frame(predict(dummies_test, newdata = test))
test_ohed <- cbind(test[,-c(which(colnames(test) %in% ohe_feats))],ohe_columns_test)
#Store true value of the test set in a variable
true_val <- as.factor(test_ohed$Foreclosed)
table(train_ohed$Foreclosed)
#Use SMOTE to decrease class imbalance
train_smote_xgb <- SMOTE(Foreclosed ~ .,train_ohed,k = 5 ,perc.over = 100, perc.under = 200)
table(train_smote_xgb$Foreclosed)
# Save the training set actuals in a variable
rf.label <- as.factor(train_smote_xgb$Foreclosed)
table(train_smote_xgb$Foreclosed)
#Select features to be included in xgb
xgbfeatures <- c(
#Geography
"CityType",
#Property
"TotalUnits", #"SqftRate", "GPTPZP",
#LoanDetails
"RoI","LTV","EMI", "Vintage", #"LoanAmount",
#PaymentBehaviour
"PaymentDelay","TimesBounced","VintageDefault",
#ApplicantCharacteristics
"PrimaryEmpType", "B_C_Education", "B_C_MasterEmpCat", "C_Income", "B_FOIR", #CIBIL
#Others
"TopUp", "CLSS"
)
matches <- c(unique(grep(paste(xgbfeatures,collapse="|"), colnames(train_smote_xgb), value=TRUE)), "CIBIL", "LoanAmount")
y <- ifelse(train_smote_xgb$Foreclosed == TRUE, 1, 0)
#y <- train_smote_xgb$Foreclosed
y <- as.numeric(as.character(y))
#Select the relevant features and create a trimmed data.frame to be used for training
train_xgb_trim <- train_smote_xgb[,matches]
test_xgb_trim <- test_ohed[,matches]
for (i in  matches)
{
train_xgb_trim[,i] <- as.numeric(as.character(train_xgb_trim[,i]))
test_xgb_trim[,i] <- as.numeric(as.character(test_xgb_trim[,i]))
}
weights <- ifelse(y==0, 0.1, ifelse(y == 1, 5, 10))
xgb <- xgboost(data = data.matrix(train_xgb_trim),
label = y,
eta = 0.1,
gamma = 0.1,
max_depth = 5,
nround=2000,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1234,
eval_metric = "error",
objective = "binary:logistic",
#               num_class = 2,
nthread = 4,
verbose = 0,
colsample_bylevel = 0.5,
weight = weights
)
xgbpred <- predict(xgb, data.matrix(test_xgb_trim))
predict_xgb <- ifelse(xgbpred > 0.5, 1, 0)
# Construct a confusion matrix
table(true_val, predict_xgb)
xgbparam <- ComputeModelParameters(table(true_val,predict_xgb), test_xgb_trim)
xgbparam
xgbmodel <- xgb.dump(xgb, with_stats = T)
importance_matrix <- xgb.importance(matches, model = xgb)
xgb.plot.importance(importance_matrix[1:10,])
importance_matrix
#Use SMOTE to decrease class imbalance
train_smote <- SMOTE(Foreclosed ~ .,train,k = 5 ,perc.over = 100, perc.under = 200)
# Save the predictor column headers in a feature set vector
feature_set1 <- c(
#Geography
"CityType",
#Property
"TotalUnits", "SqftRate", "GPTPZP",
#LoanDetails
"RoI","LTV","EMI", "LoanAmount", "CIBIL", "Vintage",
#PaymentBehaviour
"PaymentDelay","TimesBounced","VintageDefault",
#ApplicantCharacteristics
"PrimaryEmpType", "B_C_Education", "B_C_MasterEmpCat",
"C_Income", "B_FOIR", # "CoApplicant",
#Others
"CLSS", "TopUp" #"Insurance"
)
# Set the seed
seed <- 1234
# Define the cutoff
cutoff <- 0.5
?randomForest
summary(train_smote)
# Define the corresponding cutoff vector
cutoffvector1 <- c(1 - cutoff, cutoff)
rf.1 <- RunRandomForest(seed, feature_set1, train_smote,cutoffvector1)
rf.1
rf.1.preds <- MakeProbPredictions(rf.1, test,feature_set1)
rf.1.confmatrix <- MakeConfusionMatrix(rf.1, test,feature_set1, 0.5)
rf.1.confmatrix
rf.1.modelparam <- ComputeModelParameters(rf.1.confmatrix,test)
rf.1.modelparam
averageprob <- (rf.1.preds[,2] + xgbpred)/2
predict_av <- ifelse(averageprob > 0.50, 1, 0)
# Construct a confusion matrix
table(true_val, predict_av)
avmodelparam <- ComputeModelParameters(table(true_val,predict_av),test)
avmodelparam
#Plot the ROC curves
ROC_rf.1 <- roc(true_val, rf.1.preds[,2])
ROC_xgb <- roc(true_val, xgbpred)
ROC_av <- roc(true_val, averageprob)
plot(ROC_rf.1)
lines(ROC_xgb, col = "blue")
lines(ROC_av, col = "red")
plot(ROC_av, col = "blue")
# Compute the AUCs
auc(ROC_rf.1)
auc(ROC_xgb)
auc(ROC_av)
str(finaltestdata)
ohe_columns_finaltest <- as.data.frame(predict(dummies, newdata = finaltestdata))
finaltest_ohed <- cbind(finaltestdata[,-c(which(colnames(finaltestdata) %in% ohe_feats))],ohe_columns_finaltest)
finaltest_xgb_trim <- finaltest_ohed[,matches]
for (i in  matches)
{
finaltest_xgb_trim[,i] <- as.numeric(as.character(finaltest_xgb_trim[,i]))
}
xgbpredfinal <- predict(xgb, data.matrix(finaltest_xgb_trim))
rf.final.preds <- MakeProbPredictions(rf.1,finaltestdata, feature_set1)
averagefinalpred <- (rf.final.preds[,2]+xgbpredfinal)/2
finalpredictions <- cbind(finaltestdata, xgbpredfinal, rf.final.preds[,2], averagefinalpred)
finalpredbin <- ifelse(averagefinalpred >= 0.5, TRUE, FALSE)
xgbpredbin <- ifelse(xgbpredfinal >= 0.5, TRUE, FALSE)
rfpredbin <- ifelse(rf.final.preds[,2]>=0.5, TRUE,FALSE)
table(finaltestdata$Foreclosed, finalpredbin)
table(finaltestdata$Foreclosed, xgbpredbin)
table(finaltestdata$Foreclosed, rfpredbin)
finalparam <- ComputeModelParameters(table(finaltestdata$Foreclosed, finalpredbin),finaltestdata)
finalparam
write.csv(finalpredictions, "FinalPredictions.csv")
probit_model_1 <- glm(Foreclosed ~ GPTPZP + TotalUnits + B_FOIR + C_Income + RoI + LTV + EMI + CIBIL  + PrimaryEmpType + B_C_MasterEmpCat + B_C_Education + RiskCat, family = binomial(link=probit), data = train_smote)
# Print the parameter estimates
probit_model_1
summary(probit_model_1)
#Make Predictions using the logistic regression model
pred_probit_1 <- predict(probit_model_1, test_original, type = "response")
